version: '3.8'

services:
  db:
    image: postgres
    env_file:
      - .env.dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      timeout: 20s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    env_file:
      - .env.dev
    ports:
      - "8080:80"
    depends_on:
      rabbitmq:
        condition: service_healthy

  alembic:
    build:
      context: .
      dockerfile: DockerfileAlembic
    env_file:
      - .env.dev
    ports:
      - "5000:5000"  # Add the desired port mapping here
    depends_on:
      db:
        condition: service_healthy

  tdata:
    build:
      context: .
      dockerfile: DockerfileTdata
    env_file:
      - .env.dev
    ports:
      - "5001:5001"  # Add the desired port mapping here
    depends_on:
      - db
      - alembic

  gptdata:
    build:
      context: .
      dockerfile: DockerfileGPTdata
    env_file:
      - .env.dev
    depends_on:
      - db
      - alembic

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5

  redis:
    image: "redis:6.2"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: >
      /bin/sh -c "
      chmod 777 -R /data;
      chmod 777 -R /etc;
      redis-server
      "


  celery:
    build:
      context: .
      dockerfile: DockerfileCelerySubscription
    env_file:
      - .env.dev
    depends_on:
      - rabbitmq
      - redis
    restart: unless-stopped


  celery2:
    build:
      context: .
      dockerfile: DockerfileCeleryNewsCollection
    env_file:
      - .env.dev
    depends_on:
      - rabbitmq
      - redis
    restart: unless-stopped

  celery3:
    build:
      context: .
      dockerfile: DockerfileCeleryDigests
    env_file:
      - .env.dev
    depends_on:
      - rabbitmq
      - redis
    restart: unless-stopped

  flower:
    build:
      context: .
      dockerfile: DockerfileFlower
    command: celery --broker=redis://redis:6379/0 flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery
      - celery2
      - celery3

  bot_app:
    build:
      context: .
      dockerfile: DockerfileBotApp
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  subscription_service:
    build:
      context: .
      dockerfile: DockerfileSubscriptionService
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  news_collection_service:
    build:
      context: .
      dockerfile: DockerfileNewsCollectionService
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  digest_builder:
    build:
      context: .
      dockerfile: DockerfileDigestBuilder
    env_file:
      - .env.dev
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  subscription_healthcheck:
    build:
      context: .
      dockerfile: DockerfileSubscriptionsHealthCheck
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=Hobrus
      - GF_SECURITY_ADMIN_PASSWORD=123321
    depends_on:
      - db

  admin_service:
    build:
      context: .
      dockerfile: DockerfileAdminService
    env_file:
      - .env.dev
#    volumes:
#      - ./:/admin_service
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      alembic:
        condition: service_healthy

volumes:
  postgres_data:
  grafana_data:
  redis_data: